namespace CodeModelTestInput
{
    public class Class1
    {
        public void Method1()
        {
            byte[] Bytes = new byte[3] {1, 2, 255};
            ushort[] UShorts = new ushort[3] {1, 255, 65535};
            uint[] UInts = new uint[3] {255, 65535, 4294967295};
            ulong[] ULongs = new ulong[4] {255, 65535, 4294967295, 18446744073709551615};
            sbyte[] SBytes = new sbyte[5] {-128, 1, 2, 3, 127};
            short[] Shorts = new short[3] {-128, -32768, 32767};
            int[] Ints = new int[3] {-128, -32768, -2147483648};
            long[] Longs = new long[4] {-128, -32768, -2147483648, -9223372036854775808};
            char[] Chars = new char[3] {'a', 'b', 'c'};
            return;

        }

        public void Method2()
        {
            byte[] CS$0$0000 = new byte[1];
            CS$0$0000[0] = 255;
            byte[] Bytes = CS$0$0000;
            ushort[] CS$0$0001 = new ushort[1];
            CS$0$0001[0] = 65535;
            ushort[] UShorts = CS$0$0001;
            uint[] CS$0$0002 = new uint[1];
            CS$0$0002[0] = -1;
            uint[] UInts = CS$0$0002;
            ulong[] CS$0$0003 = new ulong[1];
            CS$0$0003[0] = ((long)-1);
            ulong[] ULongs = CS$0$0003;
            sbyte[] CS$0$0004 = new sbyte[1];
            CS$0$0004[0] = -128;
            sbyte[] SBytes = CS$0$0004;
            short[] CS$0$0005 = new short[1];
            CS$0$0005[0] = -32768;
            short[] Shorts = CS$0$0005;
            int[] CS$0$0006 = new int[1];
            CS$0$0006[0] = -2147483648;
            int[] Ints = CS$0$0006;
            long[] CS$0$0007 = new long[1];
            CS$0$0007[0] = -9223372036854775808;
            long[] Longs = CS$0$0007;
            char[] CS$0$0008 = new char[1];
            CS$0$0008[0] = 'a';
            char[] Chars = CS$0$0008;
            bool[] CS$0$0009 = new bool[1];
            CS$0$0009[0] = true;
            bool[] Bools = CS$0$0009;
            decimal[] CS$0$0010 = new decimal[1];
            CS$0$0010[0] = new decimal(11, 0, 0, false, 1);
            decimal[] Decimals = CS$0$0010;
            return;

        }

        private void Method3()
        {
            int j;
            int k;
            int i = 1;
            if ((i == 1))
            {
                j = 2;
            }
            else
            {
                j = 3;
            }
            k = (i + j);
            return;

        }

        private bool Method4(int[] xs, int x)
        {
            return Microsoft.Contracts.Contract.ForAll<int>(xs, delegate (int i) {
                return (i < x);

            });

        }

        private void Method5(int[] xs, int x)
        {
            if ((x < xs.Length))
            {
                xs[x] = 3;
            }
            return;

        }

        private void Method6(int[] xs, int x)
        {
            if ((x < xs.Length))
            {
                xs[x] = 3;
            }
            if ((0 < xs.Length))
            {
                xs[0] = x;
            }
            return;

        }

        private void Method7(int[] xs, int x)
        {
            if ((x < xs.Length))
            {
                xs[x] = 3;
            }
            if ((0 < xs.Length))
            {
                xs[0] = x;
            }
            else
            {
                xs = new int[3];
            }
            return;

        }

        private void Method8(int[] xs, int x)
        {
            if ((0 < xs.Length))
            {
                xs[0] = x;
            }
            else
            {
                xs = new int[3];
            }
            if ((x < xs.Length))
            {
                xs[x] = 3;
            }
            return;

        }

        private void Method9(int[] xs, int x)
        {
            if (!((0 >= xs.Length) || (x >= xs.Length)))
            {
                xs[x] = 3;
            }
            return;

        }

        private static void Method10(int x)
        {
            int[] a = new int[((x > 0) ? x : 5)];
            return;

        }

        private static void Method11(int x)
        {
            int[][] a = null;
            a[0] = new int[((x > 0) ? x : 5)];
            return;

        }

        private static bool Method12(int x)
        {
            bool CS$1$0000;
            int CS$4$0001 = x;
            switch((CS$4$0001 - 1)){
                case 0:
                    goto IL_001d;
                case 1:
                case 2:
                case 3:
                    goto IL_0021;
                default:
                    goto IL_0025;
            }
        IL_001d:
            CS$1$0000 = false;
            goto IL_0029;
        IL_0021:
            CS$1$0000 = true;
            goto IL_0029;
        IL_0025:
            CS$1$0000 = false;
        IL_0029:
            return CS$1$0000;

        }

        private string Method13()
        {
            string CS$1$0000;
            int CS$4$0001;
            try
            {
                {
                    int x;
                    CS$4$0001 = this.c;
                    switch(CS$4$0001){
                        case 0:
                            goto IL_0019;
                        case 1:
                            goto IL_0021;
                        default:
                            goto IL_0034;
                    }
                IL_0019:
                    CS$1$0000 = "1";
                    goto IL_007c;
                IL_0021:
                    try
                    {
                        CS$1$0000 = "2";
                        goto IL_007c;
                    }
                    catch
                    {
                        CS$1$0000 = "3";
                        goto IL_007c;
                    }
                IL_0034:
                    x = 0;
                    try
                    {
                        CS$4$0001 = (x + this.c);
                        switch(CS$4$0001){
                            case 0:
                                goto IL_0050;
                            case 1:
                                goto IL_0058;
                            default:
                                goto IL_0060;
                        }
                    IL_0050:
                        CS$1$0000 = "4";
                        goto IL_007c;
                    IL_0058:
                        CS$1$0000 = "5";
                        goto IL_007c;
                    IL_0060:
                        CS$1$0000 = "6";
                        goto IL_007c;
                    }
                    catch
                    {
                        CS$1$0000 = "7";
                        goto IL_007c;
                    }
                }
            }
            catch
            {
                CS$1$0000 = "8";
            }
        IL_007c:
            return CS$1$0000;

        }

        private void Method14()
        {
            try
            {
                goto IL_003a;
            }
            catch(System.ApplicationException e)
            {
                {
                    int x;
                    try
                    {
                        x = 4;
                        System.Console.WriteLine(x);
                        System.Console.WriteLine(e);
                        System.Console.WriteLine(e);
                        goto IL_002c;
                    }
                    catch(System.Exception e1)
                    {
                        System.Console.WriteLine(e1);
                        goto IL_003a;
                    }
                IL_002c:
                    goto IL_003a;
                }
            }
            catch(System.Exception ex)
            {
                System.Console.WriteLine(ex);
            }
        IL_003a:
            return;

        }

        private System.Type Method15()
        {
            return typeof(CodeModelTestInput.Class1);

        }

        private int[] Method16(int[] xs)
        {
            push &xs[0];
            push dup;
            pop = (*pop + 1);
            return xs;

        }

        private bool Method17(bool A, bool B, bool C, bool D)
        {
            int __temp_1;
            bool CS$1$0000;
            if (!(A && B))
            {
                __temp_1 = ((int)(C && D));
            }
            else
            {
                __temp_1 = 1;
            }
            CS$1$0000 = ((bool)__temp_1);
            return CS$1$0000;

        }

        private int Method18(int x, int y, int z)
        {
            int CS$1$0000;
            int midVal = z;
            if ((y < z))
            {
                if ((x < y))
                {
                    midVal = y;
                }
                else
                {
                    if ((x < z))
                    {
                        midVal = x;
                    }
                }
            }
            CS$1$0000 = midVal;
            return CS$1$0000;

        }

        public System.Collections.Generic.IEnumerable<int> Method19(int x)
        {
            int <i>5__4 = 0;
            goto IL_0101;
        IL_0043:
            if ((<i>5__4 == 8))
            {
                if ((x == <i>5__4))
                {
                    yield return x;

                }
                else
                {
                    yield return 8;

                }
                goto IL_00f2;
            }
            if ((x > 0))
            {
            }
            else
            {
                if ((x < -2))
                {
                }
                else
                {
                    yield return <i>5__4;

                    {
                    IL_00f2:
                        <i>5__4 = (<i>5__4 + 1);
                    IL_0101:
                        if ((<i>5__4 < 10))
                        {
                            goto IL_0043;
                        }
                    }
                }
            }
            yield break;

        }

        public System.Collections.Generic.IEnumerable<int> Method20(int x)
        {
            if ((x > 0))
            {
                x = 2;
            }
            else
            {
                if ((x > 1))
                {
                    x = 3;
                }
                else
                {
                    x = 4;
                }
            }
            yield break;

        }

        public void Method21()
        {
            {
                int i;
                for (i = 0; (i < 1); i = (i + 1))
                {
                    System.Action t;
                    t = delegate () {
                        i.Equals(i);
                        return;

                    };
                    {
                    }
                }
                return;

            }
        }

        public System.Collections.Generic.IEnumerable<int> Method22()
        {
            int CS$0$0002;
            {
                int <flags>5__f = 1;
                int __temp_6 = (<flags>5__f & 2);
                int __temp_7 = __temp_6;
                CS$0$0002 = __temp_7;
                <flags>5__f = __temp_6;
                yield return CS$0$0002;

                yield break;

            }
        }

        private static void Method23(out string x, out string y)
        {
            push x;
            push y;
            pop = null;
            pop = null;
            return;

        }

        private void Method24()
        {
            string a = "abc";
            string b = a.Substring(1);
            return;

        }

        public int Method25(object o)
        {
            int CS$1$0000;
            int x = 3;
            if (!(!(o is CodeModelTestInput.Class3) && !(o is CodeModelTestInput.Class1)))
            {
                x = 27;
            }
            CS$1$0000 = x;
            return CS$1$0000;

        }

        public void Method26(out bool y)
        {
            y = false;
            return;

        }

        public Class1()
        {
            this.c = 0;
            this.object();
            return;

        }

        private int c;
    }

    public class Class2
    {
        public Class2()
        {
            this.object();
            return;

        }

        public interface IIncrementable<T>
        {
            T IncrementBy(int i);

            int Value();
        }

        public class A : CodeModelTestInput.Class2.IIncrementable<CodeModelTestInput.Class2.A>
        {
            public A(string s)
            {
                this.object();
                this.s = s;
                return;

            }

            public int Value()
            {
                return this.s.Length;

            }

            public CodeModelTestInput.Class2.A IncrementBy(int i)
            {
                return this;

            }

            private string s;
        }

        public class Test2
        {
            public System.Collections.Generic.IEnumerable<string> Test1a(string s)
            {
                System.Collections.Generic.IEnumerable<string> __temp_2;
                Microsoft.Contracts.Contract.Requires((s != null));
                Microsoft.Contracts.Contract.Ensures((Microsoft.Contracts.Contract.Result<System.Collections.Generic.IEnumerable<string>>() != null));
                __temp_2 = Microsoft.Contracts.Contract.Result<System.Collections.Generic.IEnumerable<string>>();
                Microsoft.Contracts.Contract.Ensures(Microsoft.Contracts.Contract.ForAll<string>(__temp_2, (string s1) => (s1 != null)));
                yield return "hello";

                yield break;

            }

            public System.Collections.Generic.IEnumerable<T> Test1c<T>(T t, System.Collections.Generic.IEnumerable<T> ts)
            {
                T CS$0$0002;
                push &t;
                CS$0$0002 = default(T);
                if (pop.Equals(((object)CS$0$0002)))
                {
                    throw new System.ArgumentException("");
                }
                Microsoft.Contracts.Contract.Requires(Microsoft.Contracts.Contract.ForAll<T>(ts, (T t1) => t1.Equals(((object)t))));
                yield return t;

                yield break;

            }

            public System.Collections.Generic.IEnumerable<T> Test1d<T>(System.Collections.Generic.IEnumerable<T> input)
            {
                Microsoft.Contracts.Contract.Requires((input != null));
                Microsoft.Contracts.Contract.Requires(Microsoft.Contracts.Contract.ForAll<T>(input, (T s1) => (((object)s1) != null)));
                Microsoft.Contracts.Contract.Ensures(Microsoft.Contracts.Contract.ForAll<T>(Microsoft.Contracts.Contract.Result<System.Collections.Generic.IEnumerable<T>>(), (T s1) => (((object)s1) != null)));
                System.Collections.Generic.IEnumerator<T> <>7__wrapf = input.GetEnumerator();
                goto IL_00c4;
                while (<>7__wrapf.MoveNext())
                {
                    T <t>5__e = <>7__wrapf.Current;
                    yield return <t>5__e;

                IL_00c4:
                }
                yield break;

            }

            public System.Collections.Generic.IEnumerable<T> Test1e<T>(System.Collections.Generic.IEnumerable<T> input)
            {
                Microsoft.Contracts.Contract.Requires(Microsoft.Contracts.Contract.ForAll<T>(input, (T s) => (((object)s) != null)));
                System.Collections.Generic.IEnumerator<T> <>7__wrap16 = input.GetEnumerator();
                goto IL_0095;
                while (<>7__wrap16.MoveNext())
                {
                    T <t>5__15 = <>7__wrap16.Current;
                    yield return <t>5__15;

                IL_0095:
                }
                yield break;

            }

            public System.Collections.Generic.IEnumerable<int> Test1f(System.Collections.Generic.IEnumerable<int> inputArray, int max)
            {
                System.Collections.Generic.IEnumerable<int> __temp_3;
                Microsoft.Contracts.Contract.Requires(Microsoft.Contracts.Contract.ForAll<int>(inputArray, (int x) => (x < max)));
                __temp_3 = Microsoft.Contracts.Contract.Result<System.Collections.Generic.IEnumerable<int>>();
                Microsoft.Contracts.Contract.Ensures(Microsoft.Contracts.Contract.ForAll<int>(__temp_3, (int y) => (y > 0)));
                System.Collections.Generic.IEnumerator<int> <>7__wrap21 = inputArray.GetEnumerator();
                goto IL_00f6;
                while (<>7__wrap21.MoveNext())
                {
                    int <i>5__20 = <>7__wrap21.Current;
                    yield return ((max - <i>5__20) - 1);

                IL_00f6:
                }
                yield break;

            }

            public System.Collections.Generic.IEnumerable<T> Test1g<T>(System.Collections.Generic.IEnumerable<T> ts, T x)
            {
                Microsoft.Contracts.Contract.Requires(Microsoft.Contracts.Contract.ForAll<T>(ts, (T y) => this.foo(((object)y), ((object)x))));
                yield return x;

                yield break;

            }

            private bool foo(object y, object x)
            {
                return (y == x);

            }

            public System.Collections.Generic.IEnumerable<T> Test1h<T>(System.Collections.Generic.IEnumerable<T> input, int x, int y)
                where T: CodeModelTestInput.Class2.IIncrementable<T>
            {
                T CS$0$0002;
                Microsoft.Contracts.Contract.Requires(Microsoft.Contracts.Contract.ForAll<T>(input, (T t) => (t.Value() > x)));
                Microsoft.Contracts.Contract.Ensures(Microsoft.Contracts.Contract.ForAll<T>(Microsoft.Contracts.Contract.Result<System.Collections.Generic.IEnumerable<T>>(), (T t) => (t.Value() > (x + y))));
                System.Collections.Generic.IEnumerator<T> <>7__wrap31 = input.GetEnumerator();
                goto IL_0104;
                {
                    while (<>7__wrap31.MoveNext())
                    {
                        T <t>5__30 = <>7__wrap31.Current;
                        CS$0$0002 = <t>5__30;
                        yield return CS$0$0002.IncrementBy(y);

                    IL_0104:
                    }
                    yield break;

                }
            }

            public Test2()
            {
                this.object();
                return;

            }
        }

        public class Test3<T>
        {
            public Test3(T t)
            {
                this.object();
                this.tfield = t;
                return;

            }

            public System.Collections.Generic.IEnumerable<T> Test1a(T t)
            {
                System.Collections.Generic.IEnumerable<T> __temp_2;
                Microsoft.Contracts.Contract.Requires((((object)t) != null));
                Microsoft.Contracts.Contract.Ensures((Microsoft.Contracts.Contract.Result<System.Collections.Generic.IEnumerable<T>>() != null));
                __temp_2 = Microsoft.Contracts.Contract.Result<System.Collections.Generic.IEnumerable<T>>();
                Microsoft.Contracts.Contract.Ensures(Microsoft.Contracts.Contract.ForAll<T>(__temp_2, (T s1) => (((object)s1) != null)));
                yield return t;

                yield break;

            }

            public System.Collections.Generic.IEnumerable<T> Test1b(T s)
            {
                if ((((object)s) == null))
                {
                    throw new System.ArgumentException("");
                }
                yield return s;

                yield break;

            }

            public System.Collections.Generic.IEnumerable<T> Test1d(System.Collections.Generic.IEnumerable<T> input)
            {
                System.Collections.Generic.IEnumerable<T> __temp_3;
                System.Collections.Generic.IEnumerable<T> __temp_4;
                Microsoft.Contracts.Contract.Requires((input != null));
                __temp_3 = input;
                Microsoft.Contracts.Contract.Requires(Microsoft.Contracts.Contract.ForAll<T>(__temp_3, (T s1) => (((object)s1) != null)));
                __temp_4 = Microsoft.Contracts.Contract.Result<System.Collections.Generic.IEnumerable<T>>();
                Microsoft.Contracts.Contract.Ensures(Microsoft.Contracts.Contract.ForAll<T>(__temp_4, (T s1) => (((object)s1) != null)));
                System.Collections.Generic.IEnumerator<T> <>7__wrap43 = input.GetEnumerator();
                goto IL_00ea;
                while (<>7__wrap43.MoveNext())
                {
                    T <t>5__42 = <>7__wrap43.Current;
                    yield return <t>5__42;

                IL_00ea:
                }
                yield break;

            }

            public System.Collections.Generic.IEnumerable<T1> Test1e<T1>(System.Collections.Generic.IEnumerable<T> input, T1 t)
                where T1: CodeModelTestInput.Class2.IIncrementable<T1>
            {
                Microsoft.Contracts.Contract.Requires(Microsoft.Contracts.Contract.ForAll<T>(input, (T s) => (s.Value() == t.Value())));
                yield return t;

                yield break;

            }

            public System.Collections.Generic.IEnumerable<T1> Test1g<T1>(System.Collections.Generic.IEnumerable<T1> ts, T x)
                where T1: CodeModelTestInput.Class2.IIncrementable<T1>
            {
                Microsoft.Contracts.Contract.Requires(Microsoft.Contracts.Contract.ForAll<T1>(ts, (T1 y) => this.foo<T1>(((object)y), x)));
                System.Collections.Generic.IEnumerator<T1> <>7__wrap52 = ts.GetEnumerator();
                goto IL_00c8;
                while (<>7__wrap52.MoveNext())
                {
                    T1 <t1>5__51 = <>7__wrap52.Current;
                    yield return <t1>5__51;

                IL_00c8:
                }
                yield break;

            }

            private bool foo<S>(CodeModelTestInput.Class2.IIncrementable<S> y, T x)
            {
                return (y.Value() == x.Value());

            }

            public T TField
            {
                get
                {
                    return this.tfield;

                }
            }

            private T tfield;
        }
    }

    public class GenericParamMustBeStruct<T>
    {
        public string M()
        {
            T CS$0$0001;
            CS$0$0001 = default(T);
            CS$0$0001 = CS$0$0001;
            return CS$0$0001.ToString();

        }

        public GenericParamMustBeStruct()
        {
            this.object();
            return;

        }
    }

    public class Class3
    {
        public Class3(System.Collections.Generic.List<int> xs)
        {
            this.fieldJustForCtorTest = false;
            this.list = new System.Collections.Generic.List<int>();
            this.object();
            System.Collections.Generic.List<int> __temp_1 = xs;
            this.fieldJustForCtorTest = __temp_1.TrueForAll((int i) => (i > 0));
            return;

        }

        public static bool Method3_1<T>(T p1)
            where T: class
        {
            System.Collections.Generic.List<T> list = new System.Collections.Generic.List<T>();
            T tmp = p1;
            return list.TrueForAll((T t) => t.Equals(((object)tmp)));

        }

        public static bool Method3_2<T>(T p1)
        {
            System.Collections.Generic.List<T> list = new System.Collections.Generic.List<T>();
            return list.TrueForAll((T t) => t.Equals(((object)p1)));

        }

        public static bool Method3_3<T1>(T1 p1)
            where T1: class
        {
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll((T1 t) => (((object)t) == null));

        }

        public static bool Method3_4<T1>(T1 p1)
            where T1: class
        {
            int j = 1;
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll((T1 t) => (t.GetHashCode() == (p1.GetHashCode() + j)));

        }

        public bool Method3_5<T1>(T1 p1)
            where T1: class
        {
            T1 tmp = p1;
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll((T1 t) => t.Equals(((object)tmp)));

        }

        public bool Method3_6<T1>(T1 p1)
        {
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll((T1 t) => (t.GetHashCode() == p1.GetHashCode()));

        }

        public bool Method3_7<T1>(T1 p1)
            where T1: class
        {
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll((T1 t) => (((object)t) == null));

        }

        public bool Method3_8<T1>(T1 p1)
            where T1: class
        {
            int j = 1;
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll((T1 t) => (t.GetHashCode() == (p1.GetHashCode() + j)));

        }

        public bool Method3_9<T1>(T1 p1)
            where T1: class
        {
            int j = 1;
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll(delegate (T1 t) {
                System.Collections.Generic.List<T1> newList = list;
                int k = 12;
                return newList.TrueForAll(delegate (T1 t1) {
                    return (t.GetHashCode() == (((t1.GetHashCode() + p1.GetHashCode()) + j) + k));

                });

            });

        }

        public bool Method3_10<T1>(T1 p1)
            where T1: class
        {
            int j = 1;
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll(delegate (T1 t) {
                System.Collections.Generic.List<T1> newList = list;
                int k = 12;
                bool b1 = newList.TrueForAll(delegate (T1 t1) {
                    return (t.GetHashCode() == (((t1.GetHashCode() + p1.GetHashCode()) + j) + k));

                });
                bool b2 = list.TrueForAll(delegate (T1 t1) {
                    return (t1.GetHashCode() == ((t.GetHashCode() + j) + k));

                });
                return (b1 && b2);

            });

        }

        public bool Method3_17(int p1)
        {
            int local = 3;
            return this.list.TrueForAll((int t) => (t.GetHashCode() == local));

        }

        public bool Method3_18(int p1)
        {
            return this.list.TrueForAll((int t) => (t.GetHashCode() == p1));

        }

        public bool Method3_19(int p1)
        {
            System.Collections.Generic.List<int> __temp_1 = this.list;
            return __temp_1.TrueForAll((int t) => (t == 10));

        }

        public bool Method3_20(int p1)
        {
            int j = 1;
            return this.list.TrueForAll((int t) => (t == (p1 + j)));

        }

        public bool Method3_21(int p1)
        {
            int j = 1;
            return this.list.TrueForAll(delegate (int t) {
                System.Collections.Generic.List<int> newList = this.list;
                int k = 12;
                return newList.TrueForAll(delegate (int t1) {
                    return (t == (((t1 + p1) + j) + k));

                });

            });

        }

        public bool Method3_22(int p1)
        {
            int j = 1;
            return this.list.TrueForAll(delegate (int t) {
                System.Collections.Generic.List<int> newList = this.list;
                int k = 12;
                bool b1 = newList.TrueForAll(delegate (int t1) {
                    return (t.GetHashCode() == (((t1 + p1) + j) + k));

                });
                bool b2 = this.list.TrueForAll(delegate (int t1) {
                    return (t1.GetHashCode() == ((t.GetHashCode() + j) + k));

                });
                return (b1 && b2);

            });

        }

        public bool Method3_25(int i)
        {
            return this.list.TrueForAll(delegate (int t) {
                System.Collections.Generic.List<int> newList = this.list;
                return true;

            });

        }

        private bool fieldJustForCtorTest;

        private System.Collections.Generic.List<int> list;

        private class Class3Inner1<T2>
        {
            public Class3Inner1(System.Collections.Generic.List<T2> xs)
            {
                this.list_inner = new System.Collections.Generic.List<T2>();
                this.fieldJustForCtorTest = false;
                this.object();
                System.Collections.Generic.List<T2> __temp_1 = xs;
                this.fieldJustForCtorTest = __temp_1.TrueForAll((T2 i) => (((object)i) != null));
                return;

            }

            public bool Method3_11(int i)
            {
                int j = 1;
                return this.list_inner.TrueForAll(delegate (T2 t) {
                    System.Collections.Generic.List<T2> newList = this.list_inner;
                    int k = 12;
                    return newList.TrueForAll(delegate (T2 t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });

                });

            }

            public bool Method3_12(int i)
            {
                int j = 1;
                return this.list_inner.TrueForAll(delegate (T2 t) {
                    System.Collections.Generic.List<T2> newList = this.list_inner;
                    int k = 12;
                    bool b1 = newList.TrueForAll(delegate (T2 t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });
                    bool b2 = this.list_inner.TrueForAll(delegate (T2 t1) {
                        return (t1.GetHashCode() == (((t.GetHashCode() + i) + j) + k));

                    });
                    return (b1 && b2);

                });

            }

            private System.Collections.Generic.List<T2> list_inner;

            private bool fieldJustForCtorTest;
        }

        private class Class3Inner1
        {
            public Class3Inner1(System.Collections.Generic.List<int> xs)
            {
                this.list_inner = new System.Collections.Generic.List<int>();
                this.fieldJustForCtorTest = false;
                this.object();
                System.Collections.Generic.List<int> __temp_1 = xs;
                this.fieldJustForCtorTest = __temp_1.TrueForAll((int i) => (i > 0));
                return;

            }

            public bool Method3_13(int i)
            {
                int j = 1;
                return this.list_inner.TrueForAll(delegate (int t) {
                    System.Collections.Generic.List<int> newList = this.list_inner;
                    int k = 12;
                    return newList.TrueForAll(delegate (int t1) {
                        return (t == (((t1 + i) + j) + k));

                    });

                });

            }

            public bool Method3_14(int i)
            {
                int j = 1;
                return this.list_inner.TrueForAll(delegate (int t) {
                    System.Collections.Generic.List<int> newList = this.list_inner;
                    int k = 12;
                    bool b1 = newList.TrueForAll(delegate (int t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });
                    bool b2 = this.list_inner.TrueForAll(delegate (int t1) {
                        return (t1.GetHashCode() == (((t.GetHashCode() + i) + j) + k));

                    });
                    return (b1 && b2);

                });

            }

            private System.Collections.Generic.List<int> list_inner;

            private bool fieldJustForCtorTest;
        }

        private class Class3Inner2<T2>
        {
            public bool Method3_23(int i)
            {
                int j = 1;
                return this.list_inner.TrueForAll(delegate (T2 t) {
                    System.Collections.Generic.List<T2> newList = this.list_inner;
                    int k = 12;
                    return newList.TrueForAll(delegate (T2 t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });

                });

            }

            public bool Method3_24(int i)
            {
                int j = 1;
                return this.list_inner.TrueForAll(delegate (T2 t) {
                    System.Collections.Generic.List<T2> newList = this.list_inner;
                    int k = 12;
                    bool b1 = newList.TrueForAll(delegate (T2 t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });
                    bool b2 = this.list_inner.TrueForAll(delegate (T2 t1) {
                        return (t1.GetHashCode() == (((t.GetHashCode() + i) + j) + k));

                    });
                    return (b1 && b2);

                });

            }

            public Class3Inner2()
            {
                this.list_inner = new System.Collections.Generic.List<T2>();
                this.object();
                return;

            }

            private System.Collections.Generic.List<T2> list_inner;
        }
    }

    public class Class4<T>
    {
        public Class4(System.Collections.Generic.List<T> xs)
        {
            this.fieldJustForCtorTest = false;
            this.object();
            System.Collections.Generic.List<T> __temp_1 = xs;
            this.fieldJustForCtorTest = __temp_1.TrueForAll((T i) => (((object)i) != null));
            return;

        }

        public static bool Method4_1<T1>(T1 p1)
            where T1: class
        {
            T1 tmp = p1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => (t.GetHashCode() == tmp.GetHashCode()));

        }

        public static bool Method4_2<T1>(T1 p1)
        {
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => (t.GetHashCode() == p1.GetHashCode()));

        }

        public static bool Method4_3<T1>(T1 p1)
            where T1: class
        {
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => (((object)t) == null));

        }

        public static bool Method4_4<T1>(T1 p1)
            where T1: class
        {
            int j = 1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => (t.GetHashCode() == (p1.GetHashCode() + j)));

        }

        public bool Method4_5<T1>(T1 p1)
            where T1: class
        {
            T1 tmp = p1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => (t.GetHashCode() == tmp.GetHashCode()));

        }

        public bool Method4_6<T1>(T1 p1)
        {
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => (t.GetHashCode() == p1.GetHashCode()));

        }

        public bool Method4_7<T1>(T1 p1)
            where T1: class
        {
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => (((object)t) == null));

        }

        public bool Method4_8<T1>(T1 p1)
            where T1: class
        {
            int j = 1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => (t.GetHashCode() == (p1.GetHashCode() + j)));

        }

        public bool Method4_9<T1>(T1 p1)
            where T1: class
        {
            int j = 1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                int k = 12;
                return newList.TrueForAll(delegate (T t1) {
                    return (t.GetHashCode() == (((t1.GetHashCode() + p1.GetHashCode()) + j) + k));

                });

            });

        }

        public bool Method4_10<T1>(T1 p1)
            where T1: class
        {
            int j = 1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                int k = 12;
                bool b1 = newList.TrueForAll(delegate (T t1) {
                    return (t.GetHashCode() == (((t1.GetHashCode() + p1.GetHashCode()) + j) + k));

                });
                bool b2 = CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t1) {
                    return (t1.GetHashCode() == ((t.GetHashCode() + j) + k));

                });
                return (b1 && b2);

            });

        }

        public static bool Method4_13()
        {
            int local = 3;
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => (t.GetHashCode() == local));

        }

        public static bool Method4_14(int p1)
        {
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => (t.GetHashCode() == p1));

        }

        public static bool Method4_15(int p1)
        {
            System.Collections.Generic.List<T> __temp_1 = CodeModelTestInput.Class4<T>.list;
            return __temp_1.TrueForAll((T t) => (((object)t) == null));

        }

        public static bool Method4_16(int p1)
        {
            int j = 1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => (t.GetHashCode() == (p1 + j)));

        }

        public bool Method4_17(int p1)
        {
            int local = 3;
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => (t.GetHashCode() == local));

        }

        public bool Method4_18(int p1)
        {
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => (t.GetHashCode() == p1));

        }

        public bool Method4_19(int p1)
        {
            System.Collections.Generic.List<T> __temp_1 = CodeModelTestInput.Class4<T>.list;
            return __temp_1.TrueForAll((T t) => (((object)t) == null));

        }

        public bool Method4_20(int p1)
        {
            int j = 1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll((T t) => (t.GetHashCode() == (p1 + j)));

        }

        public bool Method4_21(int p1)
        {
            int j = 1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                int k = 12;
                return newList.TrueForAll(delegate (T t1) {
                    return (t.GetHashCode() == (((t1.GetHashCode() + p1) + j) + k));

                });

            });

        }

        public bool Method4_22(int p1)
        {
            int j = 1;
            return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                int k = 12;
                bool b1 = newList.TrueForAll(delegate (T t1) {
                    return (t.GetHashCode() == (((t1.GetHashCode() + p1.GetHashCode()) + j) + k));

                });
                bool b2 = CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t1) {
                    return (t1.GetHashCode() == ((t.GetHashCode() + j) + k));

                });
                return (b1 && b2);

            });

        }

        private static System.Collections.Generic.List<T> list;

        private bool fieldJustForCtorTest;

        private class Class4Inner1<T2>
        {
            public Class4Inner1(System.Collections.Generic.List<T> xs, System.Collections.Generic.List<T2> ys)
            {
                System.Collections.Generic.List<T2> __temp_2;
                bool __temp_3;
                this.list_inner = new System.Collections.Generic.List<T2>();
                this.fieldJustForCtorTest = false;
                this.object();
                System.Collections.Generic.List<T> __temp_1 = xs;
                if (__temp_1.TrueForAll((T i) => (((object)i) != null)))
                {
                    __temp_2 = ys;
                    __temp_3 = __temp_2.TrueForAll((T2 i) => (((object)i) != null));
                }
                else
                {
                    __temp_3 = false;
                }
                this.fieldJustForCtorTest = __temp_3;
                return;

            }

            public bool Method4_11(int i)
            {
                int j = 1;
                return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                    System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                    int k = 12;
                    return newList.TrueForAll(delegate (T t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });

                });

            }

            public bool Method4_12(int i)
            {
                int j = 1;
                return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                    System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                    int k = 12;
                    bool b1 = newList.TrueForAll(delegate (T t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });
                    bool b2 = this.list_inner.TrueForAll(delegate (T2 t1) {
                        return (t1.GetHashCode() == (((t.GetHashCode() + i) + j) + k));

                    });
                    return (b1 && b2);

                });

            }

            private System.Collections.Generic.List<T2> list_inner;

            private bool fieldJustForCtorTest;
        }

        private class Class4Inner2
        {
            public Class4Inner2(System.Collections.Generic.List<T> xs)
            {
                this.list_inner = new System.Collections.Generic.List<T>();
                this.fieldJustForCtorTest = false;
                this.object();
                System.Collections.Generic.List<T> __temp_1 = xs;
                this.fieldJustForCtorTest = __temp_1.TrueForAll((T i) => (((object)i) != null));
                return;

            }

            public bool Method4_11(int i)
            {
                int j = 1;
                return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                    System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                    int k = 12;
                    return newList.TrueForAll(delegate (T t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });

                });

            }

            public bool Method4_12(int i)
            {
                int j = 1;
                return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                    System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                    int k = 12;
                    bool b1 = newList.TrueForAll(delegate (T t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });
                    bool b2 = this.list_inner.TrueForAll(delegate (T t1) {
                        return (t1.GetHashCode() == (((t.GetHashCode() + i) + j) + k));

                    });
                    return (b1 && b2);

                });

            }

            private System.Collections.Generic.List<T> list_inner;

            private bool fieldJustForCtorTest;
        }

        private class Class4Inner3<T2>
        {
            public bool Method4_23(int i)
            {
                int j = 1;
                return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                    System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                    int k = 12;
                    return newList.TrueForAll(delegate (T t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });

                });

            }

            public bool Method4_24(int i)
            {
                int j = 1;
                return CodeModelTestInput.Class4<T>.list.TrueForAll(delegate (T t) {
                    System.Collections.Generic.List<T> newList = CodeModelTestInput.Class4<T>.list;
                    int k = 12;
                    bool b1 = newList.TrueForAll(delegate (T t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });
                    bool b2 = this.list_inner.TrueForAll(delegate (T2 t1) {
                        return (t1.GetHashCode() == (((t.GetHashCode() + i) + j) + k));

                    });
                    return (b1 && b2);

                });

            }

            public Class4Inner3()
            {
                this.list_inner = new System.Collections.Generic.List<T2>();
                this.object();
                return;

            }

            private System.Collections.Generic.List<T2> list_inner;
        }
    }

    public class ClassWithCtorThatGeneratesTwoClosureClasses
    {
        public ClassWithCtorThatGeneratesTwoClosureClasses(object encoder, string[] data)
        {
            System.Collections.Generic.List<int> __temp_4;
            this.name = "";
            this.object();
            {
                System.Collections.Generic.List<int> xs = new System.Collections.Generic.List<int>();
                __temp_4 = xs;
                __temp_4.TrueForAll((int i) => string.op_Equality(data[i], this.name));
                string nullEncoder = (encoder as string);
                this.name = nullEncoder;
                this.ValueToString = (object obj) => ((obj != default(object)) ? encoder.ToString() : nullEncoder);
                return;

            }
        }

        internal readonly System.Func<object, string> ValueToString;

        internal string name;
    }

    public class ClassThatCausesTempHoldingClosureClassToBeGenerated
    {
        public ClassThatCausesTempHoldingClosureClassToBeGenerated(bool b)
        {
            this.object();
            {
                System.Action act2;
                System.Action act1;
                act1 = delegate () {
                    System.Console.WriteLine(this.x);
                    return;

                };
                act2 = delegate () {
                    if (b)
                    {
                        act1();
                    }
                    return;

                };
                return;

            }
        }

        private int x;
    }

    public class UnusedCapturedLocal
    {
        public static System.IAsyncResult foo(object o, System.AsyncCallback callback, object state)
        {
            return null;

        }

        public System.IAsyncResult BeginTask(System.Func<System.AsyncCallback, object, System.IAsyncResult> task)
        {
            return null;

        }

        public System.Collections.Generic.IEnumerator<System.IAsyncResult> Execute()
        {
            object svc = new object();
            System.IAsyncResult <asyncResult>5__4 = this.BeginTask((System.AsyncCallback c, object s) => CodeModelTestInput.UnusedCapturedLocal.foo(svc, c, s));
            yield return <asyncResult>5__4;

            yield break;

        }

        public System.Collections.Generic.IEnumerator<System.IAsyncResult> Execute2()
        {
            CodeModelTestInput.UnusedCapturedLocal __temp_3 = this;
            System.IAsyncResult <asyncResult>5__9 = __temp_3.BeginTask((System.AsyncCallback c, object s) => CodeModelTestInput.UnusedCapturedLocal.foo(new object(), c, s));
            yield return <asyncResult>5__9;

            yield break;

        }

        public UnusedCapturedLocal()
        {
            this.object();
            return;

        }
    }

    public class DecompilingFinallyHandlers
    {
        public static void TerminalFinallyBlock()
        {
            int i = 0;
            try
            {
                throw new System.Exception();
            }
            finally
            {
                i = (i + 2);
            }
        }

        public DecompilingFinallyHandlers()
        {
            this.object();
            return;

        }
    }
}
