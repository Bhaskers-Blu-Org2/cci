namespace CodeModelTestInput
{
    public class Class1
    {
        public void Method1()
        {
            byte[] Bytes = new byte[3] {1, 2, 255};
            ushort[] UShorts = new ushort[3] {1, 255, 65535};
            uint[] UInts = new uint[3] {255, 65535, 4294967295};
            ulong[] ULongs = new ulong[4] {255, 65535, 4294967295, 18446744073709551615};
            sbyte[] SBytes = new sbyte[5] {-128, 1, 2, 3, 127};
            short[] Shorts = new short[3] {-128, -32768, 32767};
            int[] Ints = new int[3] {-128, -32768, -2147483648};
            long[] Longs = new long[4] {-128, -32768, -2147483648, -9223372036854775808};
            char[] Chars = new char[3] {a, b, c};
            return;

        }

        public void Method2()
        {
            byte[] local_11 = new byte[1];
            local_11[0] = 255;
            byte[] Bytes = local_11;
            ushort[] local_12 = new ushort[1];
            local_12[0] = 65535;
            ushort[] UShorts = local_12;
            uint[] local_13 = new uint[1];
            local_13[0] = -1;
            uint[] UInts = local_13;
            ulong[] local_14 = new ulong[1];
            local_14[0] = -1;
            ulong[] ULongs = local_14;
            sbyte[] local_15 = new sbyte[1];
            local_15[0] = -128;
            sbyte[] SBytes = local_15;
            short[] local_16 = new short[1];
            local_16[0] = -32768;
            short[] Shorts = local_16;
            int[] local_17 = new int[1];
            local_17[0] = -2147483648;
            int[] Ints = local_17;
            long[] local_18 = new long[1];
            local_18[0] = -9223372036854775808;
            long[] Longs = local_18;
            char[] local_19 = new char[1];
            local_19[0] = 97;
            char[] Chars = local_19;
            bool[] local_20 = new bool[1];
            local_20[0] = 1;
            bool[] Bools = local_20;
            decimal[] local_21 = new decimal[1];
            local_21[0] = new decimal(11, 0, 0, 0, 1);
            decimal[] Decimals = local_21;
            return;

        }

        private void Method3()
        {
            int j;
            int i = 1;
            if ((i == 1))
            {
                j = 2;
            }
            else
            {
                j = 3;
            }
            int k = (i + j);
            return;

        }

        private bool Method4(int[] xs, int x)
        {
            return Microsoft.Contracts.Contract.ForAll<int>(xs, delegate (int i) {
                return (i < x);

            });

        }

        private void Method5(int[] xs, int x)
        {
            if ((x < xs.Length))
            {
                xs[x] = 3;
            }
            return;

        }

        private void Method6(int[] xs, int x)
        {
            if ((x < xs.Length))
            {
                xs[x] = 3;
            }
            if ((0 < xs.Length))
            {
                xs[0] = x;
            }
            return;

        }

        private void Method7(int[] xs, int x)
        {
            if ((x < xs.Length))
            {
                xs[x] = 3;
            }
            if ((0 < xs.Length))
            {
                xs[0] = x;
            }
            else
            {
                xs = new int[3];
            }
            return;

        }

        private void Method8(int[] xs, int x)
        {
            if ((0 < xs.Length))
            {
                xs[0] = x;
            }
            else
            {
                xs = new int[3];
            }
            if ((x < xs.Length))
            {
                xs[x] = 3;
            }
            return;

        }

        private void Method9(int[] xs, int x)
        {
            if (!((0 >= xs.Length) || (x >= xs.Length)))
            {
                xs[x] = 3;
            }
            return;

        }

        private static void Method10(int x)
        {
            int[] a = new int[((x > 0) ? x : 5)];
            return;

        }

        private static void Method11(int x)
        {
            int[][] a = null;
            a[0] = new int[((x > 0) ? x : 5)];
            return;

        }

        private static bool Method12(int x)
        {
            switch((x - 1)){
                case 0:
                    goto IL_001d;
                case 1:
                case 2:
                case 3:
                    goto IL_0021;
                default:
                    goto IL_0025;
            }
        IL_001d:
            bool local_0 = 0;
            goto IL_0029;
        IL_0021:
            local_0 = 1;
            goto IL_0029;
        IL_0025:
            local_0 = 0;
        IL_0029:
            return local_0;

        }

        private string Method13()
        {
            string local_1;
            int local_2;
            try
            {
                local_2 = this.c;
                switch(local_2){
                    case 0:
                        goto IL_0019;
                    case 1:
                        goto IL_0021;
                    default:
                        goto IL_0034;
                }
            IL_0019:
                local_1 = "1";
                goto IL_007c;
            IL_0021:
                try
                {
                    local_1 = "2";
                    goto IL_007c;
                }
                catch(object )
                {
                    local_1 = "3";
                    goto IL_007c;
                }
            IL_0034:
                x = 0;
                try
                {
                    local_2 = (x + this.c);
                    switch(local_2){
                        case 0:
                            goto IL_0050;
                        case 1:
                            goto IL_0058;
                        default:
                            goto IL_0060;
                    }
                IL_0050:
                    local_1 = "4";
                    goto IL_007c;
                IL_0058:
                    local_1 = "5";
                    goto IL_007c;
                IL_0060:
                    local_1 = "6";
                    goto IL_007c;
                }
                catch(object )
                {
                    local_1 = "7";
                    goto IL_007c;
                }
            }
            catch(object )
            {
                local_1 = "8";
            }
            {
                int x;
            IL_007c:
                return local_1;

            }
        }

        private void Method14()
        {
            try
            {
                goto IL_003a;
            }
            catch(System.ApplicationException e)
            {
                {
                    int x;
                    try
                    {
                        x = 4;
                        System.Console.WriteLine(x);
                        System.Console.WriteLine(e);
                        System.Console.WriteLine(e);
                        goto IL_002c;
                    }
                    catch(System.Exception e1)
                    {
                        System.Console.WriteLine(e1);
                        goto IL_003a;
                    }
                IL_002c:
                    goto IL_003a;
                }
            }
            catch(System.Exception ex)
            {
                System.Console.WriteLine(ex);
            }
        IL_003a:
            return;

        }

        private System.Type Method15()
        {
            return typeof(CodeModelTestInput.Class1);

        }

        private int[] Method16(int[] xs)
        {
            int& __temp_1 = &xs[0];
            __temp_1 = (__temp_1 + 1);
            return xs;

        }

        private bool Method17(bool A, bool B, bool C, bool D)
        {
            bool __temp_1;
            if (!(A && B))
            {
                __temp_1 = (C && D);
            }
            else
            {
                __temp_1 = 1;
            }
            return __temp_1;

        }

        private int Method18(int x, int y, int z)
        {
            int midVal = z;
            if ((y < z))
            {
                if ((x < y))
                {
                    midVal = y;
                }
                else
                {
                    if ((x >= z))
                    {
                        goto IL_002b;
                    }
                    midVal = x;
                }
            IL_002b:
            }
            return midVal;

        }

        public System.Collections.Generic.IEnumerable<int> Method19(int x)
        {
            <i>5__4 = 0;
            goto IL_0101;
        IL_0043:
            if ((<i>5__4 == 8))
            {
                if ((x == <i>5__4))
                {
                    yield return x;

                    local_0 = 1;
                    goto IL_00a6;
                }
                yield return 8;

                local_0 = 1;
            IL_00a6:
                goto IL_00f2;
            }
            if ((x > 0))
            {
                goto IL_0113;
            }
            if ((x < -2))
            {
                goto IL_0113;
            }
            yield return <i>5__4;

            {
            IL_00f2:
                <i>5__4 = (<i>5__4 + 1);
            IL_0101:
                if ((<i>5__4 < 10))
                {
                    goto IL_0043;
                }
            IL_0113:
                yield break;

            }
        }

        public System.Collections.Generic.IEnumerable<int> Method20(int x)
        {
            {
                goto IL_0011;
            }
        IL_0011:
            if ((x > 0))
            {
                x = 2;
            }
            if ((x > 1))
            {
                x = 3;
            }
            else
            {
                x = 4;
            }
            yield break;

        }

        public Class1()
        {
            this.c = 0;
            this.object();
            return;

        }

        private int c;
    }

    public class Class2
    {
        public Class2()
        {
            this.object();
            return;

        }

        public interface IIncrementable<T>
        {
            T IncrementBy(int i);

            int Value();
        }

        public class A : CodeModelTestInput.Class2.IIncrementable<CodeModelTestInput.Class2.A>
        {
            public A(string s)
            {
                this.object();
                this.s = s;
                return;

            }

            public int Value()
            {
                return this.s.Length.get();

            }

            public CodeModelTestInput.Class2.A IncrementBy(int i)
            {
                return this;

            }

            private string s;
        }

        public class Test2
        {
            public System.Collections.Generic.IEnumerable<string> Test1a(string s)
            {
                Microsoft.Contracts.Contract.Requires((s != null));
                Microsoft.Contracts.Contract.Ensures((Microsoft.Contracts.Contract.Result<System.Collections.Generic.IEnumerable<string>>() != null));
                __temp_2 = Microsoft.Contracts.Contract.Result<System.Collections.Generic.IEnumerable<string>>();
                Microsoft.Contracts.Contract.Ensures(Microsoft.Contracts.Contract.ForAll<string>(__temp_2, delegate (string s1) {
                    return (s1 != null);

                }));
                yield return "hello";

                yield break;

            }

            public System.Collections.Generic.IEnumerable<T> Test1c<T>(T t, System.Collections.Generic.IEnumerable<T> ts)
            {
                {
                    local_2 = default(T);
                    if (t.Equals(local_2))
                    {
                        throw new System.ArgumentException("");
                    }
                    Microsoft.Contracts.Contract.Requires(Microsoft.Contracts.Contract.ForAll<T>(ts, delegate (T t1) {
                        return t1.Equals(t);

                    }));
                    yield return t;

                    yield break;

                }
            }

            public System.Collections.Generic.IEnumerable<T> Test1d<T>(System.Collections.Generic.IEnumerable<T> input)
            {
                Microsoft.Contracts.Contract.Requires((input != null));
                Microsoft.Contracts.Contract.Requires(Microsoft.Contracts.Contract.ForAll<T>(input, delegate (T s1) {
                    return (s1 != null);

                }));
                Microsoft.Contracts.Contract.Ensures(Microsoft.Contracts.Contract.ForAll<T>(Microsoft.Contracts.Contract.Result<System.Collections.Generic.IEnumerable<T>>(), delegate (T s1) {
                    return (s1 != null);

                }));
                <>7__wrapf = input.GetEnumerator();
                goto IL_00c4;
            IL_0095:
                <t>5__e = <>7__wrapf.Current.get();
                yield return <t>5__e;

            IL_00c4:
                if (<>7__wrapf.MoveNext())
                {
                    goto IL_0095;
                }
                yield break;

            }

            public System.Collections.Generic.IEnumerable<T> Test1e<T>(System.Collections.Generic.IEnumerable<T> input)
            {
                Microsoft.Contracts.Contract.Requires(Microsoft.Contracts.Contract.ForAll<T>(input, delegate (T s) {
                    return (s != null);

                }));
                <>7__wrap16 = input.GetEnumerator();
                goto IL_0095;
            IL_0064:
                <t>5__15 = <>7__wrap16.Current.get();
                yield return <t>5__15;

            IL_0095:
                if (<>7__wrap16.MoveNext())
                {
                    goto IL_0064;
                }
                yield break;

            }

            public System.Collections.Generic.IEnumerable<int> Test1f(System.Collections.Generic.IEnumerable<int> inputArray, int max)
            {
                Microsoft.Contracts.Contract.Requires(Microsoft.Contracts.Contract.ForAll<int>(inputArray, delegate (int x) {
                    return (x < max);

                }));
                __temp_3 = Microsoft.Contracts.Contract.Result<System.Collections.Generic.IEnumerable<int>>();
                Microsoft.Contracts.Contract.Ensures(Microsoft.Contracts.Contract.ForAll<int>(__temp_3, delegate (int y) {
                    return (y > 0);

                }));
                <>7__wrap21 = inputArray.GetEnumerator();
                goto IL_00f6;
            IL_00b7:
                <i>5__20 = <>7__wrap21.Current.get();
                yield return ((max - <i>5__20) - 1);

            IL_00f6:
                if (<>7__wrap21.MoveNext())
                {
                    goto IL_00b7;
                }
                yield break;

            }

            public System.Collections.Generic.IEnumerable<T> Test1g<T>(System.Collections.Generic.IEnumerable<T> ts, T x)
            {
                Microsoft.Contracts.Contract.Requires(Microsoft.Contracts.Contract.ForAll<T>(ts, delegate (T y) {
                    return this.foo(y, x);

                }));
                yield return x;

                yield break;

            }

            private bool foo(object y, object x)
            {
                return (y == x);

            }

            public System.Collections.Generic.IEnumerable<T> Test1h<T>(System.Collections.Generic.IEnumerable<T> input, int x, int y)
            {
                Microsoft.Contracts.Contract.Requires(Microsoft.Contracts.Contract.ForAll<T>(input, delegate (T t) {
                    return (t.Value() > x);

                }));
                Microsoft.Contracts.Contract.Ensures(Microsoft.Contracts.Contract.ForAll<T>(Microsoft.Contracts.Contract.Result<System.Collections.Generic.IEnumerable<T>>(), delegate (T t) {
                    return (t.Value() > (x + y));

                }));
                <>7__wrap31 = input.GetEnumerator();
                goto IL_0104;
                {
                IL_00ba:
                    <t>5__30 = <>7__wrap31.Current.get();
                    local_2 = <t>5__30;
                    yield return local_2.IncrementBy(y);

                IL_0104:
                    if (<>7__wrap31.MoveNext())
                    {
                        goto IL_00ba;
                    }
                    yield break;

                }
            }

            public Test2()
            {
                this.object();
                return;

            }
        }

        public class Test3<T>
        {
            public Test3(T t)
            {
                this.object();
                this.tfield = t;
                return;

            }

            public System.Collections.Generic.IEnumerable<T> Test1a(T t)
            {
                Microsoft.Contracts.Contract.Requires((t != null));
                Microsoft.Contracts.Contract.Ensures((Microsoft.Contracts.Contract.Result<System.Collections.Generic.IEnumerable<T>>() != null));
                __temp_2 = Microsoft.Contracts.Contract.Result<System.Collections.Generic.IEnumerable<T>>();
                Microsoft.Contracts.Contract.Ensures(Microsoft.Contracts.Contract.ForAll<T>(__temp_2, delegate (T s1) {
                    return (s1 != null);

                }));
                yield return t;

                yield break;

            }

            public System.Collections.Generic.IEnumerable<T> Test1b(T s)
            {
                if ((s == null))
                {
                    throw new System.ArgumentException("");
                }
                yield return s;

                yield break;

            }

            public System.Collections.Generic.IEnumerable<T> Test1d(System.Collections.Generic.IEnumerable<T> input)
            {
                Microsoft.Contracts.Contract.Requires((input != null));
                __temp_3 = input;
                Microsoft.Contracts.Contract.Requires(Microsoft.Contracts.Contract.ForAll<T>(__temp_3, delegate (T s1) {
                    return (s1 != null);

                }));
                __temp_4 = Microsoft.Contracts.Contract.Result<System.Collections.Generic.IEnumerable<T>>();
                Microsoft.Contracts.Contract.Ensures(Microsoft.Contracts.Contract.ForAll<T>(__temp_4, delegate (T s1) {
                    return (s1 != null);

                }));
                <>7__wrap43 = input.GetEnumerator();
                goto IL_00ea;
            IL_00bb:
                <t>5__42 = <>7__wrap43.Current.get();
                yield return <t>5__42;

            IL_00ea:
                if (<>7__wrap43.MoveNext())
                {
                    goto IL_00bb;
                }
                yield break;

            }

            public System.Collections.Generic.IEnumerable<T1> Test1e<T1>(System.Collections.Generic.IEnumerable<T> input, T1 t)
            {
                Microsoft.Contracts.Contract.Requires(Microsoft.Contracts.Contract.ForAll<T>(input, delegate (T s) {
                    return (s.Value() == t.Value());

                }));
                yield return t;

                yield break;

            }

            public System.Collections.Generic.IEnumerable<T1> Test1g<T1>(System.Collections.Generic.IEnumerable<T1> ts, T x)
            {
                Microsoft.Contracts.Contract.Requires(Microsoft.Contracts.Contract.ForAll<T1>(ts, delegate (T1 y) {
                    return this.foo<T1>(y, x);

                }));
                <>7__wrap52 = ts.GetEnumerator();
                goto IL_00c8;
            IL_0099:
                <t1>5__51 = <>7__wrap52.Current.get();
                yield return <t1>5__51;

            IL_00c8:
                if (<>7__wrap52.MoveNext())
                {
                    goto IL_0099;
                }
                yield break;

            }

            private bool foo<S>(CodeModelTestInput.Class2.IIncrementable<S> y, T x)
            {
                return (y.Value() == x.Value());

            }

            public T TField
            {
                get
                {
                    return this.tfield;

                }
            }

            private T tfield;
        }
    }

    public class Class3
    {
        public static bool Method3_1<T>(T p1)
        {
            System.Collections.Generic.List<T> list = new System.Collections.Generic.List<T>();
            T tmp;
            tmp = p1;
            return list.TrueForAll(delegate (T t) {
                return t.Equals(tmp);

            });

        }

        public static bool Method3_2<T>(T p1)
        {
            System.Collections.Generic.List<T> list = new System.Collections.Generic.List<T>();
            return list.TrueForAll(delegate (T t) {
                return t.Equals(p1);

            });

        }

        public static bool Method3_3<T1>(T1 p1)
        {
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll(delegate (T1 t) {
                return (t == null);

            });

        }

        public static bool Method3_4<T1>(T1 p1)
        {
            int j = 1;
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll(delegate (T1 t) {
                return (t.GetHashCode() == (p1.GetHashCode() + j));

            });

        }

        public bool Method3_5<T1>(T1 p1)
        {
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll(delegate (T1 t) {
                return t.Equals(p1);

            });

        }

        public bool Method3_6<T1>(T1 p1)
        {
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll(delegate (T1 t) {
                return (t.GetHashCode() == p1.GetHashCode());

            });

        }

        public bool Method3_7<T1>(T1 p1)
        {
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll(delegate (T1 t) {
                return (t == null);

            });

        }

        public bool Method3_8<T1>(T1 p1)
        {
            int j = 1;
            System.Collections.Generic.List<T1> list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll(delegate (T1 t) {
                return (t.GetHashCode() == (p1.GetHashCode() + j));

            });

        }

        public bool Method3_9<T1>(T1 p1)
        {
            int j = 1;
            System.Collections.Generic.List<T1> list;
            list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll(delegate (T1 t) {
                System.Collections.Generic.List<T1> newList = list;
                int k;
                k = 12;
                return newList.TrueForAll(delegate (T1 t1) {
                    return (t.GetHashCode() == (((t1.GetHashCode() + p1.GetHashCode()) + j) + k));

                });

            });

        }

        public bool Method3_10<T1>(T1 p1)
        {
            int j = 1;
            System.Collections.Generic.List<T1> list;
            list = new System.Collections.Generic.List<T1>();
            return list.TrueForAll(delegate (T1 t) {
                System.Collections.Generic.List<T1> newList = list;
                int k;
                k = 12;
                bool b1 = newList.TrueForAll(delegate (T1 t1) {
                    return (t.GetHashCode() == (((t1.GetHashCode() + p1.GetHashCode()) + j) + k));

                });
                bool b2 = list.TrueForAll(delegate (T1 t1) {
                    return (t1.GetHashCode() == ((t.GetHashCode() + j) + k));

                });
                return (b1 && b2);

            });

        }

        public bool Method3_17(int p1)
        {
            int local = 3;
            return this.list.TrueForAll(delegate (int t) {
                return (t.GetHashCode() == local);

            });

        }

        public bool Method3_18(int p1)
        {
            return this.list.TrueForAll(delegate (int t) {
                return (t.GetHashCode() == p1);

            });

        }

        public bool Method3_19(int p1)
        {
            return this.list.TrueForAll(delegate (int t) {
                return (t == 10);

            });

        }

        public bool Method3_20(int p1)
        {
            int j = 1;
            return this.list.TrueForAll(delegate (int t) {
                return (t == (p1 + j));

            });

        }

        public bool Method3_21(int p1)
        {
            int j = 1;
            return this.list.TrueForAll(delegate (int t) {
                System.Collections.Generic.List<int> newList = this.list;
                int k;
                k = 12;
                return newList.TrueForAll(delegate (int t1) {
                    return (t == (((t1 + p1) + j) + k));

                });

            });

        }

        public bool Method3_22(int p1)
        {
            int j = 1;
            return this.list.TrueForAll(delegate (int t) {
                System.Collections.Generic.List<int> newList = this.list;
                int k;
                k = 12;
                bool b1 = newList.TrueForAll(delegate (int t1) {
                    return (t.GetHashCode() == (((t1 + p1) + j) + k));

                });
                bool b2 = this.list.TrueForAll(delegate (int t1) {
                    return (t1.GetHashCode() == ((t.GetHashCode() + j) + k));

                });
                return (b1 && b2);

            });

        }

        public bool Method3_25(int i)
        {
            return this.list.TrueForAll(delegate (int t) {
                System.Collections.Generic.List<int> newList = this.list;
                return true;

            });

        }

        public Class3()
        {
            this.list = new System.Collections.Generic.List<int>();
            this.object();
            return;

        }

        private System.Collections.Generic.List<int> list;

        private class Class3Inner1<T2>
        {
            public bool Method3_11(int i)
            {
                int j = 1;
                return this.list_inner.TrueForAll(delegate (T2 t) {
                    System.Collections.Generic.List<T2> newList = this.list_inner;
                    int k;
                    k = 12;
                    return newList.TrueForAll(delegate (T2 t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });

                });

            }

            public bool Method3_12(int i)
            {
                int j = 1;
                return this.list_inner.TrueForAll(delegate (T2 t) {
                    System.Collections.Generic.List<T2> newList = this.list_inner;
                    int k;
                    k = 12;
                    bool b1 = newList.TrueForAll(delegate (T2 t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });
                    bool b2 = this.list_inner.TrueForAll(delegate (T2 t1) {
                        return (t1.GetHashCode() == (((t.GetHashCode() + i) + j) + k));

                    });
                    return (b1 && b2);

                });

            }

            public Class3Inner1()
            {
                this.list_inner = new System.Collections.Generic.List<T2>();
                this.object();
                return;

            }

            private System.Collections.Generic.List<T2> list_inner;
        }

        private class Class3Inner1
        {
            public bool Method3_13(int i)
            {
                int j = 1;
                return this.list_inner.TrueForAll(delegate (int t) {
                    System.Collections.Generic.List<int> newList = this.list_inner;
                    int k;
                    k = 12;
                    return newList.TrueForAll(delegate (int t1) {
                        return (t == (((t1 + i) + j) + k));

                    });

                });

            }

            public bool Method3_14(int i)
            {
                int j = 1;
                return this.list_inner.TrueForAll(delegate (int t) {
                    System.Collections.Generic.List<int> newList = this.list_inner;
                    int k;
                    k = 12;
                    bool b1 = newList.TrueForAll(delegate (int t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });
                    bool b2 = this.list_inner.TrueForAll(delegate (int t1) {
                        return (t1.GetHashCode() == (((t.GetHashCode() + i) + j) + k));

                    });
                    return (b1 && b2);

                });

            }

            public Class3Inner1()
            {
                this.list_inner = new System.Collections.Generic.List<int>();
                this.object();
                return;

            }

            private System.Collections.Generic.List<int> list_inner;
        }

        private class Class3Inner2<T2>
        {
            public bool Method3_23(int i)
            {
                int j = 1;
                return this.list_inner.TrueForAll(delegate (T2 t) {
                    System.Collections.Generic.List<T2> newList = this.list_inner;
                    int k;
                    k = 12;
                    return newList.TrueForAll(delegate (T2 t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });

                });

            }

            public bool Method3_24(int i)
            {
                int j = 1;
                return this.list_inner.TrueForAll(delegate (T2 t) {
                    System.Collections.Generic.List<T2> newList = this.list_inner;
                    int k;
                    k = 12;
                    bool b1 = newList.TrueForAll(delegate (T2 t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });
                    bool b2 = this.list_inner.TrueForAll(delegate (T2 t1) {
                        return (t1.GetHashCode() == (((t.GetHashCode() + i) + j) + k));

                    });
                    return (b1 && b2);

                });

            }

            public Class3Inner2()
            {
                this.list_inner = new System.Collections.Generic.List<T2>();
                this.object();
                return;

            }

            private System.Collections.Generic.List<T2> list_inner;
        }
    }

    public class Class4<T>
    {
        public static bool Method4_1<T1>(T1 p1)
        {
            return list.TrueForAll(delegate (T t) {
                return (t.GetHashCode() == p1.GetHashCode());

            });

        }

        public static bool Method4_2<T1>(T1 p1)
        {
            return list.TrueForAll(delegate (T t) {
                return (t.GetHashCode() == p1.GetHashCode());

            });

        }

        public static bool Method4_3<T1>(T1 p1)
        {
            return list.TrueForAll(delegate (T t) {
                return (t == null);

            });

        }

        public static bool Method4_4<T1>(T1 p1)
        {
            int j = 1;
            return list.TrueForAll(delegate (T t) {
                return (t.GetHashCode() == (p1.GetHashCode() + j));

            });

        }

        public bool Method4_5<T1>(T1 p1)
        {
            return list.TrueForAll(delegate (T t) {
                return (t.GetHashCode() == p1.GetHashCode());

            });

        }

        public bool Method4_6<T1>(T1 p1)
        {
            return list.TrueForAll(delegate (T t) {
                return (t.GetHashCode() == p1.GetHashCode());

            });

        }

        public bool Method4_7<T1>(T1 p1)
        {
            return list.TrueForAll(delegate (T t) {
                return (t == null);

            });

        }

        public bool Method4_8<T1>(T1 p1)
        {
            int j = 1;
            return list.TrueForAll(delegate (T t) {
                return (t.GetHashCode() == (p1.GetHashCode() + j));

            });

        }

        public bool Method4_9<T1>(T1 p1)
        {
            int j = 1;
            return list.TrueForAll(delegate (T t) {
                System.Collections.Generic.List<T> newList = list;
                int k;
                k = 12;
                return newList.TrueForAll(delegate (T t1) {
                    return (t.GetHashCode() == (((t1.GetHashCode() + p1.GetHashCode()) + j) + k));

                });

            });

        }

        public bool Method4_10<T1>(T1 p1)
        {
            int j = 1;
            return list.TrueForAll(delegate (T t) {
                System.Collections.Generic.List<T> newList = list;
                int k;
                k = 12;
                bool b1 = newList.TrueForAll(delegate (T t1) {
                    return (t.GetHashCode() == (((t1.GetHashCode() + p1.GetHashCode()) + j) + k));

                });
                bool b2 = list.TrueForAll(delegate (T t1) {
                    return (t1.GetHashCode() == ((t.GetHashCode() + j) + k));

                });
                return (b1 && b2);

            });

        }

        public static bool Method4_13()
        {
            int local = 3;
            return list.TrueForAll(delegate (T t) {
                return (t.GetHashCode() == local);

            });

        }

        public static bool Method4_14(int p1)
        {
            return list.TrueForAll(delegate (T t) {
                return (t.GetHashCode() == p1);

            });

        }

        public static bool Method4_15(int p1)
        {
            return list.TrueForAll(delegate (T t) {
                return (t == null);

            });

        }

        public static bool Method4_16(int p1)
        {
            int j = 1;
            return list.TrueForAll(delegate (T t) {
                return (t.GetHashCode() == (p1 + j));

            });

        }

        public bool Method4_17(int p1)
        {
            int local = 3;
            return list.TrueForAll(delegate (T t) {
                return (t.GetHashCode() == local);

            });

        }

        public bool Method4_18(int p1)
        {
            return list.TrueForAll(delegate (T t) {
                return (t.GetHashCode() == p1);

            });

        }

        public bool Method4_19(int p1)
        {
            return list.TrueForAll(delegate (T t) {
                return (t == null);

            });

        }

        public bool Method4_20(int p1)
        {
            int j = 1;
            return list.TrueForAll(delegate (T t) {
                return (t.GetHashCode() == (p1 + j));

            });

        }

        public bool Method4_21(int p1)
        {
            int j = 1;
            return list.TrueForAll(delegate (T t) {
                System.Collections.Generic.List<T> newList = list;
                int k;
                k = 12;
                return newList.TrueForAll(delegate (T t1) {
                    return (t.GetHashCode() == (((t1.GetHashCode() + p1) + j) + k));

                });

            });

        }

        public bool Method4_22(int p1)
        {
            int j = 1;
            return list.TrueForAll(delegate (T t) {
                System.Collections.Generic.List<T> newList = list;
                int k;
                k = 12;
                bool b1 = newList.TrueForAll(delegate (T t1) {
                    return (t.GetHashCode() == (((t1.GetHashCode() + p1.GetHashCode()) + j) + k));

                });
                bool b2 = list.TrueForAll(delegate (T t1) {
                    return (t1.GetHashCode() == ((t.GetHashCode() + j) + k));

                });
                return (b1 && b2);

            });

        }

        public Class4()
        {
            this.object();
            return;

        }

        private static System.Collections.Generic.List<T> list;

        private class Class4Inner1<T2>
        {
            public bool Method4_11(int i)
            {
                int j = 1;
                return list.TrueForAll(delegate (T t) {
                    System.Collections.Generic.List<T> newList = list;
                    int k;
                    k = 12;
                    return newList.TrueForAll(delegate (T t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });

                });

            }

            public bool Method4_12(int i)
            {
                int j = 1;
                return list.TrueForAll(delegate (T t) {
                    System.Collections.Generic.List<T> newList = list;
                    int k;
                    k = 12;
                    bool b1 = newList.TrueForAll(delegate (T t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });
                    bool b2 = this.list_inner.TrueForAll(delegate (T2 t1) {
                        return (t1.GetHashCode() == (((t.GetHashCode() + i) + j) + k));

                    });
                    return (b1 && b2);

                });

            }

            public Class4Inner1()
            {
                this.list_inner = new System.Collections.Generic.List<T2>();
                this.object();
                return;

            }

            private System.Collections.Generic.List<T2> list_inner;
        }

        private class Class4Inner2
        {
            public bool Method4_11(int i)
            {
                int j = 1;
                return list.TrueForAll(delegate (T t) {
                    System.Collections.Generic.List<T> newList = list;
                    int k;
                    k = 12;
                    return newList.TrueForAll(delegate (T t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });

                });

            }

            public bool Method4_12(int i)
            {
                int j = 1;
                return list.TrueForAll(delegate (T t) {
                    System.Collections.Generic.List<T> newList = list;
                    int k;
                    k = 12;
                    bool b1 = newList.TrueForAll(delegate (T t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });
                    bool b2 = this.list_inner.TrueForAll(delegate (T t1) {
                        return (t1.GetHashCode() == (((t.GetHashCode() + i) + j) + k));

                    });
                    return (b1 && b2);

                });

            }

            public Class4Inner2()
            {
                this.list_inner = new System.Collections.Generic.List<T>();
                this.object();
                return;

            }

            private System.Collections.Generic.List<T> list_inner;
        }

        private class Class4Inner3<T2>
        {
            public bool Method4_23(int i)
            {
                int j = 1;
                return list.TrueForAll(delegate (T t) {
                    System.Collections.Generic.List<T> newList = list;
                    int k;
                    k = 12;
                    return newList.TrueForAll(delegate (T t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });

                });

            }

            public bool Method4_24(int i)
            {
                int j = 1;
                return list.TrueForAll(delegate (T t) {
                    System.Collections.Generic.List<T> newList = list;
                    int k;
                    k = 12;
                    bool b1 = newList.TrueForAll(delegate (T t1) {
                        return (t.GetHashCode() == (((t1.GetHashCode() + i) + j) + k));

                    });
                    bool b2 = this.list_inner.TrueForAll(delegate (T2 t1) {
                        return (t1.GetHashCode() == (((t.GetHashCode() + i) + j) + k));

                    });
                    return (b1 && b2);

                });

            }

            public Class4Inner3()
            {
                this.list_inner = new System.Collections.Generic.List<T2>();
                this.object();
                return;

            }

            private System.Collections.Generic.List<T2> list_inner;
        }
    }
}
